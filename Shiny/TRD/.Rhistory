df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_06.JPG.dat",
"3,5", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_06.JPG.dat",
"3,7", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_06.JPG.dat",
"3,9", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_08.JPG.dat",
"4,15", # col, row, from
"24,16", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_10.JPG.dat",
"22,15", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_11.JPG.dat",
"14,8", # col, row, from
"15,7", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_12.JPG.dat",
"17,6", # col, row, from
"24,16", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_12.JPG.dat",
"2,16", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_13.JPG.dat",
"1,12", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_13.JPG.dat",
"13,5", # col, row, from
"24,16", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
library(shiny); runApp('Library/CloudStorage/OneDrive-unistra.fr/TRD/PhenotypingDiploidy/PIXL range selector.R')
runApp('Library/CloudStorage/OneDrive-unistra.fr/TRD/PhenotypingDiploidy/PIXL range selector.R')
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_18.JPG.dat",
"17,6", # col, row, from
"24,16", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
library(shiny); runApp('Library/CloudStorage/OneDrive-unistra.fr/TRD/PhenotypingDiploidy/PIXL range selector.R')
library(readxl)
Crosses <- read_excel("Library/CloudStorage/OneDrive-unistra.fr/TRD/Organisation/Crosses.xlsx",
sheet = "Crosses JNR")
View(Crosses)
colnames(Crosses)
library(ggplot2)
ggplot(Crosses, aes(Status))+
geom_bar()
ggplot(Crosses, aes(Status))+
geom_bar()+theme_bw(20)
ggplot(Crosses, aes(Status))+
geom_bar()+theme_bw(20)+ylab("# Crosses")
ggplot(Crosses, aes(`Colonies in pool`))+
geom_bar()
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()+theme_bw(20)+ylab("# Crosses")
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()+theme_bw(20)+ylab("# Crosses")+
geom_vline(xintercept = 1536, color="red")
ggplot(Crosses, aes(Status))+
geom_bar()+theme_bw(20)+ylab("# Crosses")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()+theme_bw(20)+ylab("# Crosses")+
geom_vline(xintercept = 1536, color="red")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
ggplot(Crosses, aes(Status))+
geom_bar()+theme_bw(20)+ylab("# Crosses")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()+theme_bw(20)+ylab("# Crosses")+
geom_vline(xintercept = 1536, color="red")
install.packages(c("MASS", "survival"))
shiny::runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
setwd("~/Documents/GitHub/TRD/Shiny/TRD")
runApp()
install.packages("readr")
install.packages(c("stringr", "dplyr", "tidyr", "data.table", "tidytable", "readxl"))
shiny::runApp()
install.packages("R.utils")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(df_TRD, aes(global_pos, AD_A1/sumCount))+
geom_point(alpha=0.1,color="grey")+geom_line(mapping=aes(global_pos, smoothed, color=abs(0.5-smoothed)), inherit.aes=FALSE, linewidth=2)+
scale_color_viridis_c(option="A", limits = c(0,0.5))+
ylim(c(0,1))+geom_hline(yintercept = 0.5)+
geom_vline(xintercept = chrs$global_pos)+theme_bw(16)+ylab("Allele Frequency")+xlab("POS")+theme(legend.position = "none")+
#geom_hline(yintercept = c(0.4,0.6))+
ggtitle(sample)+labs(alpha="Coverage")+scale_x_continuous(labels = comma)
crosses=list.files("../data/")
crosses=unlist(lapply(crosses,getFirst_v2,split="-"))
df_TRD<-fread(paste0("../data/",crosses[1],"-AF.csv.gz"))
chrs=summarise(group_by(df_TRD, chr),maxpos=max(pos))
chrs=chrs[naturalorder(chrs$chr),]
ggplot(df_TRD, aes(global_pos, AD_A1/sumCount))+
geom_point(alpha=0.1,color="grey")+geom_line(mapping=aes(global_pos, smoothed, color=abs(0.5-smoothed)), inherit.aes=FALSE, linewidth=2)+
scale_color_viridis_c(option="A", limits = c(0,0.5))+
ylim(c(0,1))+geom_hline(yintercept = 0.5)+
geom_vline(xintercept = chrs$global_pos)+theme_bw(16)+ylab("Allele Frequency")+xlab("POS")+theme(legend.position = "none")+
#geom_hline(yintercept = c(0.4,0.6))+
ggtitle(sample)+labs(alpha="Coverage")+scale_x_continuous(labels = comma)
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(devtools)
library(naturalsort)
library(scales)
source_url('https://raw.githubusercontent.com/jnrunge/general/main/functions.R')
setwd("~/Documents/GitHub/TRD/Shiny/TRD")
crosses=list.files("../data/")
crosses=unlist(lapply(crosses,getFirst_v2,split="-"))
df_TRD<-fread(paste0("../data/",crosses[1],"-AF.csv.gz"))
chrs=summarise(group_by(df_TRD, chr),maxpos=max(pos))
chrs=chrs[naturalorder(chrs$chr),]
ggplot(df_TRD, aes(global_pos, AD_A1/sumCount))+
geom_point(alpha=0.1,color="grey")
ggplot(df_TRD, aes(global_pos, AD_A1/sumCount))+
geom_point(alpha=0.1,color="grey")+geom_line(mapping=aes(global_pos, smoothed, color=abs(0.5-smoothed)), inherit.aes=FALSE, linewidth=2)+
scale_color_viridis_c(option="A", limits = c(0,0.5))
ggplot(df_TRD, aes(global_pos, AD_A1/sumCount))+
geom_point(alpha=0.1,color="grey")+geom_line(mapping=aes(global_pos, smoothed, color=abs(0.5-smoothed)), inherit.aes=FALSE, linewidth=2)+
scale_color_viridis_c(option="A", limits = c(0,0.5))+
ylim(c(0,1))+geom_hline(yintercept = 0.5)+
geom_vline(xintercept = chrs$global_pos)+theme_bw(16)+ylab("Allele Frequency")+xlab("POS")+theme(legend.position = "none")
ggplot(df_TRD, aes(global_pos, AD_A1/sumCount))+
geom_point(alpha=0.1,color="grey")+geom_line(mapping=aes(global_pos, smoothed, color=abs(0.5-smoothed)), inherit.aes=FALSE, linewidth=2)+
scale_color_viridis_c(option="A", limits = c(0,0.5))+
ylim(c(0,1))+geom_hline(yintercept = 0.5)+
geom_vline(xintercept = chrs$global_pos)+theme_bw(16)+ylab("Allele Frequency")+xlab("POS")+theme(legend.position = "none")+
#geom_hline(yintercept = c(0.4,0.6))+
ggtitle(sample)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
