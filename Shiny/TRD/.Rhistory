if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_06.JPG.dat",
"3,4", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_06.JPG.dat",
"3,5", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_06.JPG.dat",
"3,7", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_06.JPG.dat",
"3,9", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_08.JPG.dat",
"4,15", # col, row, from
"24,16", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_10.JPG.dat",
"22,15", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_11.JPG.dat",
"14,8", # col, row, from
"15,7", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_12.JPG.dat",
"17,6", # col, row, from
"24,16", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_12.JPG.dat",
"2,16", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_13.JPG.dat",
"1,12", # col, row, from
"24,16", # col, row, to
"pos") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_13.JPG.dat",
"13,5", # col, row, from
"24,16", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
library(shiny); runApp('Library/CloudStorage/OneDrive-unistra.fr/TRD/PhenotypingDiploidy/PIXL range selector.R')
runApp('Library/CloudStorage/OneDrive-unistra.fr/TRD/PhenotypingDiploidy/PIXL range selector.R')
# here I should just input from,to , and whether that is a square or from here until end
library(data.table)
args=c("~/OneDrive - unistra.fr/TRD/PhenotypingDiploidy/20221205/gitter/Cross_18.JPG.dat",
"17,6", # col, row, from
"24,16", # col, row, to
"range") # range or region or pos (just 'from' field)
file=args[1]
from=args[2]
to=args[3]
type=args[4]
df=fread(file, sep="\t")
if(!file.exists(paste(file, ".bak",sep=""))){
file.copy(file, paste(file, ".bak",sep=""))
}
if(type=="range"){
df$size[((df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2]))) |
((df$col>as.numeric(strsplit(from, ",")[[1]][1])) & df$col<as.numeric(strsplit(to, ",")[[1]][1])) |
(df$col==as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="region"){
df$size[(df$col>=as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`>=as.numeric(strsplit(from, ",")[[1]][2])) &
(df$col<=as.numeric(strsplit(to, ",")[[1]][1]) &
df$`# row`<=as.numeric(strsplit(to, ",")[[1]][2]))]=9999
}
if(type=="pos"){
df$size[(df$col==as.numeric(strsplit(from, ",")[[1]][1]) &
df$`# row`==as.numeric(strsplit(from, ",")[[1]][2]))]=9999
}
writeLines(text = readLines(paste(file, ".bak",sep=""))[which(startsWith(readLines(paste(file, ".bak",sep="")), "#"))], con=file)
fwrite(df, file, sep = "\t",append=TRUE,quote = FALSE)
library(shiny); runApp('Library/CloudStorage/OneDrive-unistra.fr/TRD/PhenotypingDiploidy/PIXL range selector.R')
library(readxl)
Crosses <- read_excel("Library/CloudStorage/OneDrive-unistra.fr/TRD/Organisation/Crosses.xlsx",
sheet = "Crosses JNR")
View(Crosses)
colnames(Crosses)
library(ggplot2)
ggplot(Crosses, aes(Status))+
geom_bar()
ggplot(Crosses, aes(Status))+
geom_bar()+theme_bw(20)
ggplot(Crosses, aes(Status))+
geom_bar()+theme_bw(20)+ylab("# Crosses")
ggplot(Crosses, aes(`Colonies in pool`))+
geom_bar()
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()+theme_bw(20)+ylab("# Crosses")
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()+theme_bw(20)+ylab("# Crosses")+
geom_vline(xintercept = 1536, color="red")
ggplot(Crosses, aes(Status))+
geom_bar()+theme_bw(20)+ylab("# Crosses")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()+theme_bw(20)+ylab("# Crosses")+
geom_vline(xintercept = 1536, color="red")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
ggplot(Crosses, aes(Status))+
geom_bar()+theme_bw(20)+ylab("# Crosses")+
geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white")
ggplot(Crosses, aes(`Colonies in pool`))+
geom_histogram()+theme_bw(20)+ylab("# Crosses")+
geom_vline(xintercept = 1536, color="red")
shiny::runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
runApp('Documents/GitHub/TRD/Shiny/TRD')
tree
tree=ape::read.tree("../data/Victor/full2543Matrix.DP10.GQ20.SNPs.99pNonMiss.Biallelic.IDset.vcf.gz.swapped.newick")
setwd("~/Documents/GitHub/TRD/Shiny/TRD")
tree=ape::read.tree("../data/Victor/full2543Matrix.DP10.GQ20.SNPs.99pNonMiss.Biallelic.IDset.vcf.gz.swapped.newick")
tree
tree$tip.label
runApp()
runApp()
runApp()
sample(c("none","a1","a2"),size=length(tree$tip.label),replace = TRUE)
runApp()
node_df
node_df=data.frame(node=tree$tip.label,
group=sample(c("none","a1","a2"),size=length(tree$tip.label),replace = TRUE))
tree
left_join(tree,node_df, by="node")
node_df
dplyr::left_join(tree,node_df, by="node")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_tippoint
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
